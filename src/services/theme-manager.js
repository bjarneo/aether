import GLib from 'gi://GLib';
import Gio from 'gi://Gio';
import Gtk from 'gi://Gtk?version=4.0';
import Gdk from 'gi://Gdk?version=4.0';

/**
 * ThemeManager - Handles custom theming with CSS variables and live reload
 */
export class ThemeManager {
    constructor() {
        this.cssProvider = null;
        this.fileMonitor = null;
        this.overrideFileMonitor = null;
        this.themeFile = null;
        this.overrideFile = null;
        
        this._initializeThemeFiles();
        this._applyTheme();
        this._setupFileMonitors();
    }

    _initializeThemeFiles() {
        const configDir = GLib.build_filenamev([GLib.get_user_config_dir(), 'aether']);
        GLib.mkdir_with_parents(configDir, 0o755);
        
        const themePath = GLib.build_filenamev([configDir, 'theme.css']);
        const overridePath = GLib.build_filenamev([configDir, 'theme.override.css']);
        
        this.themeFile = Gio.File.new_for_path(themePath);
        this.overrideFile = Gio.File.new_for_path(overridePath);
        
        // Create base theme if it doesn't exist
        if (!this.themeFile.query_exists(null)) {
            this._createBaseTheme();
        }
        
        // Create empty override file if it doesn't exist
        if (!this.overrideFile.query_exists(null)) {
            this._createOverrideTheme();
        }
    }

    _createBaseTheme() {
        const baseTheme = `/* Aether Base Theme
 * DO NOT EDIT THIS FILE - Your changes will be preserved in theme.override.css
 * 
 * This file contains the default theme definitions and loads your overrides.
 * To customize the theme, edit theme.override.css instead.
 */

:root {
    /* Button colors */
    --aether-button-bg: transparent;
    --aether-button-hover-bg: alpha(@accent_bg_color, 0.1);
    --aether-button-active-bg: alpha(@accent_bg_color, 0.2);
    --aether-button-border: alpha(@borders, 0.3);
    --aether-button-hover-border: @accent_bg_color;
    
    /* Background colors */
    --aether-window-bg: @window_bg_color;
    --aether-view-bg: @view_bg_color;
    --aether-card-bg: @card_bg_color;
    --aether-headerbar-bg: @headerbar_bg_color;
    --aether-sidebar-bg: @view_bg_color;
    --aether-actionbar-bg: @headerbar_bg_color;
    
    /* Slider/Scale colors */
    --aether-slider-bg: @accent_bg_color;
    --aether-slider-trough-bg: alpha(@borders, 0.3);
    
    /* Suggested action buttons (Apply, OK, etc) */
    --aether-suggested-button-bg: @accent_bg_color;
    --aether-suggested-button-hover-bg: shade(@accent_bg_color, 1.1);
    --aether-suggested-button-fg: @accent_fg_color;
    
    /* Destructive action buttons (Delete, Remove, etc) */
    --aether-destructive-button-bg: @destructive_bg_color;
    --aether-destructive-button-hover-bg: shade(@destructive_bg_color, 1.1);
    --aether-destructive-button-fg: @destructive_fg_color;
}

/* Apply theme to buttons */
button {
    background-color: var(--aether-button-bg);
    border: 2px solid var(--aether-button-border);
}

button:hover {
    background-color: var(--aether-button-hover-bg);
    border-color: var(--aether-button-hover-border);
}

button:active {
    background-color: var(--aether-button-active-bg);
}

/* Suggested action buttons */
button.suggested-action {
    background-color: var(--aether-suggested-button-bg);
    color: var(--aether-suggested-button-fg);
    border-color: var(--aether-suggested-button-bg);
}

button.suggested-action:hover {
    background-color: var(--aether-suggested-button-hover-bg);
    border-color: var(--aether-suggested-button-hover-bg);
}

/* Destructive action buttons */
button.destructive-action {
    background-color: var(--aether-destructive-button-bg);
    color: var(--aether-destructive-button-fg);
    border-color: var(--aether-destructive-button-bg);
}

button.destructive-action:hover {
    background-color: var(--aether-destructive-button-hover-bg);
    border-color: var(--aether-destructive-button-hover-bg);
}

/* Use suggested button color for all accent elements */
/* Checkboxes - all possible selectors */
checkbutton {
    background-color: transparent;
}

checkbutton check {
    background-color: transparent;
    border-color: currentColor;
}

checkbutton:checked,
checkbutton:active,
checkbutton:checked check,
checkbutton check:checked,
check:checked {
    background-color: var(--aether-suggested-button-bg);
    border-color: var(--aether-suggested-button-bg);
    color: var(--aether-suggested-button-fg);
    -gtk-icon-palette: success var(--aether-suggested-button-fg);
}

checkbutton:checked:hover,
checkbutton:checked:hover check {
    background-color: var(--aether-suggested-button-hover-bg);
    border-color: var(--aether-suggested-button-hover-bg);
}

/* Switches (Light mode toggle, etc) */
switch:checked,
switch:active {
    background-color: var(--aether-suggested-button-bg);
    border-color: var(--aether-suggested-button-bg);
}

switch:checked:hover {
    background-color: var(--aether-suggested-button-hover-bg);
}

switch slider:checked {
    background-color: var(--aether-suggested-button-fg);
}

/* Expander arrows - comprehensive selectors for Adwaita */
row.expander:checked image.expander-row-arrow,
row.expander:checked .expander-row-arrow,
expander-row:checked image.expander-row-arrow,
expander-row:checked .expander-row-arrow,
expander-row:checked > box > image,
expander:checked > box > image,
.expander-row-arrow:checked,
image.expander-row-arrow {
    color: inherit;
}

row.expander:checked image.expander-row-arrow,
row.expander:checked .expander-row-arrow,
expander-row:checked image.expander-row-arrow,
expander-row:checked .expander-row-arrow {
    color: var(--aether-suggested-button-bg);
    -gtk-icon-palette: success var(--aether-suggested-button-bg);
}

/* Links */
link {
    color: var(--aether-suggested-button-bg);
}

link:hover {
    color: var(--aether-suggested-button-hover-bg);
}

/* Selection/highlighting */
selection {
    background-color: var(--aether-suggested-button-bg);
    color: var(--aether-suggested-button-fg);
}

*:selected {
    background-color: var(--aether-suggested-button-bg);
    color: var(--aether-suggested-button-fg);
}

/* Progress bars */
progressbar progress {
    background-color: var(--aether-suggested-button-bg);
}

/* Spinners */
spinner {
    color: var(--aether-suggested-button-bg);
}

/* Background colors */
window {
    background-color: var(--aether-window-bg);
}

.view {
    background-color: var(--aether-view-bg);
}

.card {
    background-color: var(--aether-card-bg);
}

headerbar {
    background-color: var(--aether-headerbar-bg);
}

/* Sidebar background */
.navigation-sidebar,
.sidebar,
sidebar,
navigation-view .sidebar,
splitview .sidebar {
    background-color: var(--aether-sidebar-bg);
}

/* Action bar background */
actionbar,
.action-bar {
    background-color: var(--aether-actionbar-bg);
}

/* Slider/Scale colors */
scale {
    background-color: transparent;
}

scale slider {
    background-color: var(--aether-slider-bg);
    min-width: 20px;
    min-height: 20px;
}

scale trough {
    background-color: var(--aether-slider-trough-bg);
    min-height: 6px;
}

scale highlight,
scale trough highlight {
    background-color: var(--aether-slider-bg);
}

/* Load user overrides */
@import url('theme.override.css');
`;

        try {
            this.themeFile.replace_contents(
                new TextEncoder().encode(baseTheme),
                null,
                false,
                Gio.FileCreateFlags.REPLACE_DESTINATION,
                null
            );
            console.log(`Created base theme at: ${this.themeFile.get_path()}`);
        } catch (e) {
            console.error(`Failed to create base theme: ${e.message}`);
        }
    }

    _createOverrideTheme() {
        const overrideTheme = `/* Aether Theme Overrides
 * Edit this file to customize your Aether theme
 * Changes are applied automatically on save (live reload)
 * 
 * Available CSS Variables:
 * 
 * BUTTON COLORS:
 *   --aether-button-bg                    Normal button background
 *   --aether-button-hover-bg              Button background on hover
 *   --aether-button-active-bg             Button background when pressed
 *   --aether-button-border                Button border color
 *   --aether-button-hover-border          Button border color on hover
 * 
 * BACKGROUND COLORS:
 *   --aether-window-bg                    Main window background
 *   --aether-view-bg                      Content area background
 *   --aether-card-bg                      Card/panel background
 *   --aether-headerbar-bg                 Header bar background
 *   --aether-sidebar-bg                   Sidebar background
 *   --aether-actionbar-bg                 Action bar (button wrapper) background
 * 
 * SLIDER COLORS:
 *   --aether-slider-bg                    Slider handle color
 *   --aether-slider-trough-bg             Slider track/trough background
 * 
 * SUGGESTED ACTION BUTTONS (Save, Apply, OK):
 *   --aether-suggested-button-bg          Background color
 *   --aether-suggested-button-hover-bg    Hover background color
 *   --aether-suggested-button-fg          Text color
 * 
 * DESTRUCTIVE ACTION BUTTONS (Delete, Reset, Remove):
 *   --aether-destructive-button-bg        Background color
 *   --aether-destructive-button-hover-bg  Hover background color
 *   --aether-destructive-button-fg        Text color
 * 
 * EXAMPLE USAGE:
 * 
 * :root {
 *     --aether-button-bg: #1e1e2e;
 *     --aether-button-hover-bg: #313244;
 *     --aether-button-border: #89b4fa;
 *     --aether-window-bg: #11111b;
 * }
 * 
 * You can also add custom CSS rules below to style specific elements.
 * See THEMING.md for more examples and documentation.
 */

:root {
    /* Add your custom CSS variable overrides here */
}

/* Add your custom CSS rules here */
`;

        try {
            this.overrideFile.replace_contents(
                new TextEncoder().encode(overrideTheme),
                null,
                false,
                Gio.FileCreateFlags.REPLACE_DESTINATION,
                null
            );
            console.log(`Created override theme at: ${this.overrideFile.get_path()}`);
        } catch (e) {
            console.error(`Failed to create override theme: ${e.message}`);
        }
    }

    _applyTheme() {
        try {
            // Remove old provider if exists
            if (this.cssProvider) {
                Gtk.StyleContext.remove_provider_for_display(
                    Gdk.Display.get_default(),
                    this.cssProvider
                );
            }

            // Create new provider
            this.cssProvider = new Gtk.CssProvider();
            this.cssProvider.load_from_file(this.themeFile);

            // Add to display
            Gtk.StyleContext.add_provider_for_display(
                Gdk.Display.get_default(),
                this.cssProvider,
                Gtk.STYLE_PROVIDER_PRIORITY_USER // Higher priority than APPLICATION
            );

            console.log('Theme applied successfully');
        } catch (e) {
            console.error(`Failed to apply theme: ${e.message}`);
        }
    }

    _setupFileMonitors() {
        // Monitor base theme file
        try {
            this.fileMonitor = this.themeFile.monitor_file(
                Gio.FileMonitorFlags.NONE,
                null
            );

            this.fileMonitor.connect('changed', (monitor, file, otherFile, eventType) => {
                if (eventType === Gio.FileMonitorEvent.CHANGES_DONE_HINT ||
                    eventType === Gio.FileMonitorEvent.CHANGED) {
                    console.log('Base theme file changed, reloading...');
                    GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, () => {
                        this._applyTheme();
                        return GLib.SOURCE_REMOVE;
                    });
                }
            });

            console.log('File monitor setup for base theme');
        } catch (e) {
            console.error(`Failed to setup base theme monitor: ${e.message}`);
        }

        // Monitor override file
        try {
            this.overrideFileMonitor = this.overrideFile.monitor_file(
                Gio.FileMonitorFlags.NONE,
                null
            );

            this.overrideFileMonitor.connect('changed', (monitor, file, otherFile, eventType) => {
                if (eventType === Gio.FileMonitorEvent.CHANGES_DONE_HINT ||
                    eventType === Gio.FileMonitorEvent.CHANGED) {
                    console.log('Override theme file changed, reloading...');
                    GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, () => {
                        this._applyTheme();
                        return GLib.SOURCE_REMOVE;
                    });
                }
            });

            console.log('File monitor setup for override theme (live reload enabled)');
        } catch (e) {
            console.error(`Failed to setup override theme monitor: ${e.message}`);
        }
    }

    getThemePath() {
        return this.themeFile.get_path();
    }

    getOverridePath() {
        return this.overrideFile.get_path();
    }

    openThemeFile() {
        // Open the override file, not the base theme
        try {
            const launcher = new Gtk.FileLauncher({
                file: this.overrideFile
            });
            launcher.launch(null, null, (source, result) => {
                try {
                    launcher.launch_finish(result);
                } catch (e) {
                    console.error(`Failed to open override theme file: ${e.message}`);
                }
            });
        } catch (e) {
            console.error(`Failed to launch override theme file: ${e.message}`);
        }
    }

    destroy() {
        if (this.fileMonitor) {
            this.fileMonitor.cancel();
            this.fileMonitor = null;
        }

        if (this.overrideFileMonitor) {
            this.overrideFileMonitor.cancel();
            this.overrideFileMonitor = null;
        }

        if (this.cssProvider) {
            Gtk.StyleContext.remove_provider_for_display(
                Gdk.Display.get_default(),
                this.cssProvider
            );
            this.cssProvider = null;
        }
    }
}
